load("@ofiuco//lib:py_zip.bzl", "py_zip")
load("@rules_python//python:defs.bzl", "py_binary", "py_test")
load(":cc_toolchain_config.bzl", "cc_toolchain_config")
load(":transitions.bzl", "py_binary_linux_x86_64")

platform(
    name = "darwin_arm64",
    constraint_values = [
        "@platforms//os:macos",
        "@platforms//cpu:arm64",
    ],
)

platform(
    name = "linux_arm64",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:arm64",
    ],
)

platform(
    name = "linux_x86_64",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
)

platform(
    name = "win32_x86_64",
    constraint_values = [
        "@platforms//os:windows",
        "@platforms//cpu:x86_64",
    ],
)

# As of Bazel 8.0 Python packaging for Windows requires a proper compiler
# Add a host clang compiler as described in
# https://bazel.build/tutorials/ccp-toolchain-config#configure-cc-toolchain
filegroup(name = "empty")

cc_toolchain_config(
    name = "cc-toolchain-config",
)

cc_toolchain(
    name = "cc-compiler",
    all_files = ":empty",
    ar_files = ":empty",
    as_files = ":empty",
    compiler_files = ":empty",
    dwp_files = ":empty",
    linker_files = ":empty",
    objcopy_files = ":empty",
    strip_files = ":empty",
    supports_param_files = 0,
    toolchain_config = ":cc-toolchain-config",
    toolchain_identifier = "cc-toolchain",
)

toolchain(
    name = "cc-toolchain",
    exec_compatible_with = [
    ],
    target_compatible_with = [
    ],
    toolchain = ":cc-compiler",
    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
)

py_binary(
    name = "app",
    srcs = ["app.py"],
    deps = [
        "@poetry//:numpy",
    ],
)

py_zip(
    name = "default.zip",
    target = ":app",
)

py_zip(
    name = "deploy_darwin_arm64.zip",
    platform = ":darwin_arm64",
    target = ":app",
)

py_zip(
    name = "deploy_linux_arm64.zip",
    platform = ":linux_arm64",
    target = ":app",
)

filegroup(
    name = "deploy_linux_arm64",
    srcs = [":deploy_linux_arm64.zip"],
    output_group = "all",
)

# py_zip(
#     name = "deploy_win32_x86_64.zip",
#     platform = ":win32_x86_64",
#     target = ":app",
# )

py_binary_linux_x86_64(
    name = "app_linux_x86_64",
    binary = ":app",
)

py_zip(
    name = "deploy_linux_x86_64.zip",
    target = ":app_linux_x86_64",
)

filegroup(
    name = "deploy_linux_x86_64",
    srcs = [":deploy_linux_x86_64.zip"],
    output_group = "all",
)

py_test(
    name = "test",
    size = "large",
    srcs = ["test.py"],
    data = [
        ":default.zip",
        ":deploy_darwin_arm64.zip",
        ":deploy_linux_arm64",
        ":deploy_linux_x86_64",
        # ":deploy_win32_x86_64.zip",
    ],
    deps = [
        "@poetry//:pyelftools",
        "@poetry//:pytest",
    ],
)
