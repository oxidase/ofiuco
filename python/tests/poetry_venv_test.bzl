"""unit tests for globstar poetry_venv repository rule"""

load("@bazel_skylib//lib:partial.bzl", "partial")
load("@bazel_skylib//lib:unittest.bzl", "analysistest", "asserts", "unittest")
load("//python/private:poetry_venv.bzl", "dfs_cycles", "parse_lock_file")

def _parse_lock_file_test_impl(ctx):
    env = unittest.begin(ctx)

    lock = """# This file is automatically @generated by Poetry 1.4.1 and should not be changed by hand.

[[package]]
name = "aenum"
version = "3.1.12"
description = "Advanced Enumerations (compatible with Python's stdlib Enum), NamedTuples, and NamedConstants"
category = "main"
optional = false
python-versions = "*"
files = [
    {file = "aenum-3.1.12-py2-none-any.whl", hash = "sha256:8d79c9e3ec997220e355b96b322e672fb56a53e61744138ed838407e3a07b610"},
    {file = "aenum-3.1.12-py3-none-any.whl", hash = "sha256:2d544ef7323c088d68abf9a84b9f3f6db0d516fec685e15678b5f84fdb7b8ba0"},
    {file = "aenum-3.1.12.tar.gz", hash = "sha256:3e531c91860a81f885f7e6e97d219ae9772cb899580084788935dad7d9742ef0"},
]

[[package]]
name = "moto"
version = "4.1.6"
description = ""
category = "main"
optional = false
python-versions = ">=3.7"
files = [
    {file = "moto-4.1.6-py2.py3-none-any.whl", hash = "sha256:cfe398a1f6e317d061c47c3d2dd8c6893f3eb49154984a7cbb8bcd4ba517d67d"},
    {file = "moto-4.1.6.tar.gz", hash = "sha256:fdcc2731212ca050a28b2bc83e87628294bcbd55cb4f4c4692f972023fb1e7e6"},
]

[package.dependencies]
aws-xray-sdk = {version = ">=0.93,<0.96 || >0.96", optional = true, markers = "extra == \\"server\\""}
boto3 = ">=1.9.201"
botocore = ">=1.12.201"

[package.source]
type = "file"
url = "/tmp/moto-4.1.6.tar.gz"


[[package]]
name = "click"
version = "8.1.3+local"
description = "Composable command line interface toolkit"
category = "main"
optional = false
python-versions = ">=3.7"
files = [
    {file = "click-8.1.3-py3-none-any.whl", hash = "sha256:bb4d8133cb15a609f44e8213d9b391b0809795062913b383c62be0ee95b1db48"},
    {file = "click-8.1.3.tar.gz", hash = "sha256:7682dc8afb30297001674575ea00d1814d808d6a36af415a82bd481d37ba7b8e"},
]

[package.dependencies]
colorama = {version = "*", markers = "platform_system == \\"Windows\\""}
packaging = ">=14.0"
pywin32 = {version = ">=304", markers = "sys_platform == \\"win32\\""}

[[package]]
name = "tqdm"
version = "4.65.0"
description = "Fast, Extensible Progress Meter"
category = "main"
optional = false
python-versions = ">=3.7"
files = [
    {file = "tqdm-4.65.0-py3-none-any.whl", hash = "sha256:c4f53a17fe37e132815abceec022631be8ffe1b9381c2e6e30aa70edc99e9671"},
    {file = "tqdm-4.65.0.tar.gz", hash = "sha256:1871fb68a86b8fb3b59ca4cdd3dcccbc7e6d613eeed31f4c332531977b89beb5"},
]

[package.dependencies]
colorama = {version = "*", markers = "platform_system == \\"Windows\\""}

[package.extras]
dev = ["py-make (>=0.1.0)", "twine", "wheel"]
notebook = ["ipywidgets (>=6)"]
slack = ["slack-sdk"]
telegram = ["requests"]

[[package]]
name = "flask"
version = "2.2.3"
description = "A simple framework for building complex web applications."
category = "main"
optional = false
python-versions = ">=3.7"
files = [
    {file = "Flask-2.2.3-py3-none-any.whl", hash = "sha256:c0bec9477df1cb867e5a67c9e1ab758de9cb4a3e52dd70681f59fa40a62b3f2d"},
    {file = "Flask-2.2.3.tar.gz", hash = "sha256:7eb373984bf1c770023fce9db164ed0c3353cd0b53f130f4693da0ca756a2e6d"},
]

[package.dependencies]
click = ">=8.0"
importlib-metadata = {version = ">=3.6.0", markers = "python_version < \\"3.10\\""}
itsdangerous = ">=2.0"
Jinja2 = ">=3.0"
Werkzeug = ">=2.2.2"
colorama = {version = "*", markers = "sys_platform == \\"win32\\""}
exceptiongroup = {version = ">=1.0.0rc8", markers = "python_version < \\"3.11\\""}
tomli = {version = ">=1.0.0", markers = "python_version < \\"3.11\\""}



[[package]]
name = "torch"
version = "2.0.1+cu118"
description = "Tensors and Dynamic neural networks in Python with strong GPU acceleration"
optional = false
python-versions = ">=3.8.0"
files = [
    {file = "torch-2.0.1+cu118-cp310-cp310-linux_x86_64.whl", hash = "sha256:a7a49d459bf4862f64f7bc1a68beccf8881c2fa9f3e0569608e16ba6f85ebf7b"},
    {file = "torch-2.0.1+cu118-cp310-cp310-win_amd64.whl", hash = "sha256:f58d75619bc96e4322343c030b893613701caa2d6db8017155da226c14171335"},
    {file = "torch-2.0.1+cu118-cp311-cp311-linux_x86_64.whl", hash = "sha256:143b6c658c17d43376e2dfbaa2c106d35639d615e5e8dec4429cf1e510dd8d61"},
    {file = "torch-2.0.1+cu118-cp311-cp311-win_amd64.whl", hash = "sha256:b663a4ee744d574095dbd612644de345944247c0605692309fd9f6c7ccdea022"},
    {file = "torch-2.0.1+cu118-cp38-cp38-linux_x86_64.whl", hash = "sha256:2ce38a6e4ea7c4b7f5baa51e65243a5f687f6e19ab7915ba5b2a431105f50bbe"},
    {file = "torch-2.0.1+cu118-cp38-cp38-win_amd64.whl", hash = "sha256:e58d26a11bd57ac19761c018c3151c15bc71d068afc8ec409bfd9b4cfcc63a52"},
    {file = "torch-2.0.1+cu118-cp39-cp39-linux_x86_64.whl", hash = "sha256:eb55f29db5744eda8a96f5594e637daed0d52278273005de759970e67cfa6a5a"},
    {file = "torch-2.0.1+cu118-cp39-cp39-win_amd64.whl", hash = "sha256:fa225b6f941ee0e78978ac85ed7744d3c19fff462473821f8060c14faa60043e"},
]

[package.dependencies]
filelock = "*"
jinja2 = "*"
networkx = "*"
sympy = "*"
triton = {version = "2.0.0", markers = "platform_system == \\"Linux\\" and platform_machine == \\"x86_64\\""}
typing-extensions = "*"

[package.source]
type = "legacy"
url = "https://download.pytorch.org/whl/cu118"
reference = "pytorch"

"""

    build_content = parse_lock_file(lock)
    asserts.true(env, """package(\n  name = "click",\n  constraint = "click==8.1.3",\n  description = "Composable command line interface toolkit",""" in build_content)
    asserts.true(env, """"moto-4.1.6.tar.gz": "sha256:fdcc2731212ca050a28b2bc83e87628294bcbd55cb4f4c4692f972023fb1e7e6",""" in build_content)
    asserts.true(env, """deps = [":click", ":importlib-metadata", ":itsdangerous", ":jinja2", ":werkzeug", ":colorama", ":exceptiongroup", ":tomli"],""" in build_content)
    asserts.true(env, """markers = '''{"colorama":"platform_system == \\\\\\"Windows\\\\\\"","pywin32":"sys_platform == \\\\\\"win32\\\\\\""}''',""" in build_content)
    asserts.true(env, """"/tmp/moto-4.1.6.tar.gz",""" in build_content)
    asserts.true(env, """extra_index_urls = ["https://download.pytorch.org/whl/cu118"],""" in build_content)
    asserts.true(env, """markers = '''{"triton":"platform_system == \\\\\\"Linux\\\\\\" and platform_machine == \\\\\\"x86_64\\\\\\""}''',""" in build_content)

    return unittest.end(env)

parse_lock_file_test = unittest.make(_parse_lock_file_test_impl)

def _dfs_cycles_test_impl(ctx):
    env = unittest.begin(ctx)

    graph = {
        "a": ["b", "c"],
        "b": ["d", "x"],
        "c": ["e"],
        "d": [],
        "e": ["d", "f"],
        "f": ["c"],
    }

    edges = dfs_cycles(graph)
    asserts.false(env, "x" in edges)
    asserts.true(env, "c" in edges["f"])
    asserts.true(env, all([not edges[u] for u in ["a", "b", "c", "d", "e"]]))
    return unittest.end(env)

dfs_cycles_test = unittest.make(_dfs_cycles_test_impl)

def poetry_venv_test_suite():
    unittest.suite(
        "poetry_venv_test",
        partial.make(parse_lock_file_test),
        partial.make(dfs_cycles_test),
    )
