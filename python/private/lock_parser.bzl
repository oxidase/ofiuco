load("@ofiuco_defs//:defs.bzl", _python_host = "python_host")

def _parse_lock_impl(rctx):
    self = str(rctx.path(rctx.attr._self)).split("/external/")[-1]
    header = "# Autogenerated file by _parse_lock_impl in {}".format(self)
    header += '''\n\nload("@rules_python//python:py_library.bzl", "py_library")'''
    rules_repository = self.split("/", 1)[0]
    rules_repository = ("@@" if "~" in rules_repository else "@") + rules_repository
    rules_repository = rules_repository.split("+")[0]
    prefix = '''load("{name}//python/private:package_deps.bzl", "package")'''.format(name = rules_repository)

    interpreter = rctx.path(rctx.attr._python_host)
    rctx.watch(rctx.attr.lock)
    rctx.watch(rctx.attr._lock_parser)
    if rctx.attr.toml:
        rctx.watch(rctx.attr.toml)

    exec_result = rctx.execute([
        interpreter,
        rctx.path(rctx.attr._lock_parser),
        rctx.path(rctx.attr.lock),
        json.encode(rctx.attr.platforms),
        "--{}generate_extras".format("" if rctx.attr.generate_extras else "no"),
    ] + (["--deps={}".format(json.encode(rctx.attr.deps))] if rctx.attr.deps else [])
      + (["--project_file={}".format(rctx.path(rctx.attr.toml))] if rctx.attr.toml else []))


    if exec_result.return_code:
        fail("Parsing {} failed with exit code {}\n{}\n".format(rctx.attr.lock, exec_result.return_code, exec_result.stderr))

    rctx.file("BUILD.bazel", "{}\n\n{}\n\n{}".format(header, prefix, exec_result.stdout))



parse_lock = repository_rule(
    attrs = {
        "lock": attr.label(
            allow_single_file = True,
            doc = "Lock file",
        ),
        "toml": attr.label(
            allow_single_file = True,
            doc = "pyproject file",
        ),
        "deps": attr.string_list_dict(
            doc = "dictionary of extra dependency labels per Python package name",
        ),
        "generate_extras": attr.bool(
            default = True,
            doc = "Generate packages with extra dependencies",
        ),
        "platforms": attr.string_dict(
            doc = "The mapping of interpter substrings to Python platform tags and environment markers as a JSON string",
        ),
        "_lock_parser": attr.label(
            allow_single_file = True,
            default = ":lock_parser.py",
        ),
        "_python_host": attr.label(
            allow_single_file = True,
            default = _python_host,
        ),
        "_self": attr.label(
            allow_single_file = True,
            default = ":lock_parser.bzl",
        ),
    },
    doc = """Process lock file.""",
    implementation = _parse_lock_impl,
)
